// Generated by CoffeeScript 1.6.3
(function() {
  var async, cacheKey, db, _;

  _ = require('underscore');

  async = require('async');

  db = {};

  module.exports = function(gif) {
    var Cache;
    db = gif;
    Cache = (function() {
      function Cache(model, attributes, options) {
        var a;
        this.model = model;
        this.attributes = attributes != null ? attributes : {};
        if (!(this instanceof Cache)) {
          return new Cache(this.model, this.attributes, this.redit);
        }
        db.init(options);
        a = _(this.attributes);
        this.keys = a.keys;
        this.calc = a.values;
        this.attach();
      }

      Cache.prototype.attach = function() {
        var action, operations, _i, _len, _results;
        operations = ['cache', 'cast'];
        _results = [];
        for (_i = 0, _len = operations.length; _i < _len; _i++) {
          action = operations[_i];
          _results.push(this.model.method(action, this[action]()));
        }
        return _results;
      };

      Cache.prototype.cache = function() {
        var cache;
        cache = this;
        return function(attributes, next) {
          var model;
          if (attributes == null) {
            attributes = cache.keys;
          }
          model = this;
          if (_(attributes).isNull() === true) {
            attributes = cache.attributes;
          }
          if (typeof attributes === typeof String) {
            attributes = [attributes];
          }
          if (attributes.length === 0) {
            return next(model, null);
          }
          return async.map(attributes, cache.write, function(err, changes) {
            if (err) {
              throw err;
            }
            if (next) {
              return model.cast(next);
            }
          });
        };
      };

      Cache.prototype.write = function(attribute, done) {
        var key, model, next, redit;
        redit = this.redis;
        model = this.model;
        key = cacheKey(model, attribute);
        next = function(value) {
          return db.write(model, key, value, done);
        };
        return this.attributes[attribute].call(this.model, next);
      };

      Cache.prototype.cast = function() {
        var cache;
        cache = this;
        return function(next) {
          var model;
          model = this;
          if (cache.keys.length === 0) {
            return next(model, null);
          }
          return async.map(cache.keys, cache.read, function(err, changes) {
            if (err) {
              throw err;
            }
            if (next) {
              return next(model, changes);
            }
          });
        };
      };

      Cache.prototype.read = function(attribute, done) {
        var cache, ckey, model, next, redit;
        cache = this;
        redit = this.redis;
        model = this.model;
        ckey = cacheKey(model, attribute);
        next = function(err, result) {
          model[attribute] = result;
          return done(err, result);
        };
        return db.read(key, function(err, result) {
          if (err === false) {
            return cache.write(attribute, next);
          } else {
            return next(err, result);
          }
        });
      };

      return Cache;

    })();
    return Cache;
  };

  cacheKey = function(model, attribute) {
    return model.modelName + ':' + model._id + ':' + attribute;
  };

}).call(this);
